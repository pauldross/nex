/**
 * @author Paul Rossouw
 * @date 23 Sep 2023
 * @details
 * \b This \b program \b needs: \n
 *   - The mesh (surface or volume) of the squid for current calculation \n
 *   - The settings.json generated by inductex \n \n
 * \b The \b process: \n
 *   1) Run inductEx to generate the neeeded mesh and settings files. \n
 *   2) Extract needed surface mesh using gmshEx.h. \n
 *   3) Take the output field file (eg B_field.vtk) and optimize the mesh using remesh.h. \n
 *   4) Run tth. \n
 *   5) Repeat 3 - 4. \n
 *   6) Use noiseEx.h to calculate the msfn
 */


#include <iostream>
#include "depend/noiseEx.h"
#include "depend/argparse.hpp"

using namespace std;

int main(int argc, char **argv){

    // for testing the algorithm without mesh quality:
    argparse::ArgumentParser program("nex");

    program.add_argument("path")
        .required()
        .help("The path to the VTK file that contains the B-field calculations. Data type must be unstructured grid!");

    program.add_argument("current")
        .required()
        .help("The current flowing around the loop")
        .scan<'g', double>();
    program.add_description("A program for calculating the MSFN figure from simulation results obtained from InductEx.");

    try {
        program.parse_args(argc, argv);
    }
    catch (const std::exception& err) {
        std::cerr << err.what() << std::endl;
        std::cerr << program;
        std::exit(1);
    }
    auto path = program.get<std::string>("path");
    auto current = program.get<double>("current");

//    string fileLoc = argv[1];
//    double curr = stod(argv[2]);

    noiseEx n(path);


    cout << n.getMSFN(current) << endl;

    cout << n.getArea() << endl;

    return EXIT_SUCCESS;
}
